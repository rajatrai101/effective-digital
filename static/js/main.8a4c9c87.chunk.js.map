{"version":3,"sources":["Navbar.js","Dialog.js","Card.js","GalleryView.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","width","NavBar","props","classes","path","window","location","href","substring","lastIndexOf","React","useState","value","setValue","Paper","className","Tabs","onChange","event","newValue","indicatorColor","textColor","centered","Tab","label","component","Link","to","DialogTitle","withStyles","theme","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","children","onClose","disableTypography","Typography","variant","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","CustomizedDialogs","isDialogOpen","open","setOpen","handleClose","Dialog","aria-labelledby","id","Title","dividers","CardMedia","alt","image","ImageURLs","FullSize","title","gutterBottom","Family","Description","card","maxWidth","ImgCard","toggleIsDialogOpen","handleToggle","lastVal","Card","CardActionArea","height","Thumb","CardContent","control","GalleryView","useEffect","fetch","match","url","then","response","json","myJson","Grid","container","item","xs","justify","map","animalData","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a4c9c87.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n        flexGrow: 1,\r\n        width:\"80%\"\r\n  },\r\n});\r\n\r\nconst NavBar = props => {\r\n  const classes = useStyles();\r\n  const path = window.location.href.substring(window.location.href.lastIndexOf('/') + 1);\r\n  const [value, setValue] = React.useState(path == 'animals' ? 0 :1 );\r\n\r\n  const handleChange = (event, newValue) =>{\r\n    setValue(newValue);\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Tabs\r\n        value={value}\r\n        onChange={handleChange}\r\n        indicatorColor=\"secondary\"\r\n        textColor=\"secondary\"\r\n        centered\r\n          >\r\n            <Tab label=\"Animals\" component={Link} to=\"/animals\" />\r\n            <Tab label=\"Fruit & Veg\" component={Link} to=\"/fruitveg\" />\r\n      </Tabs>\r\n    </Paper>\r\n  );\r\n}   \r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)(props => {\r\n  const { children, classes, onClose } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          X\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles(theme => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles(theme => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst CustomizedDialogs = (props) => {\r\n  const [open, setOpen] = React.useState(props.isDialogOpen);\r\n  const handleClose = () => {\r\n      setOpen(false);\r\n      props.onClose();\r\n  };\r\n\r\n  return (\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        {props.Title}\r\n        </DialogTitle>\r\n          <DialogContent dividers>\r\n          <CardMedia\r\n        component=\"img\"\r\n          alt={props.Title}\r\n          image={props.ImageURLs.FullSize}\r\n          title={props.Title}\r\n              />\r\n          \r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                Family: {props.Family}\r\n          </Typography>      \r\n          <Typography gutterBottom>\r\n          {props.Description}\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n\r\nexport default CustomizedDialogs;","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from './Dialog'\r\nimport { is } from '@babel/types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: 300,\r\n        margin: '10px',\r\n  },\r\n \r\n}));\r\n\r\nconst ImgCard = props => {\r\n    const classes = useStyles();\r\n    const [isDialogOpen, toggleIsDialogOpen] = React.useState(false);\r\n\r\n    const handleToggle = () =>  toggleIsDialogOpen((lastVal) => !lastVal);\r\n    return (\r\n    <Card className={classes.card} onClick={handleToggle}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={props.Title}\r\n          height=\"140\"\r\n          image={props.ImageURLs.Thumb}\r\n          title={props.Title}\r\n        />\r\n        <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                {props.Title}\r\n            </Typography>\r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                Family: {props.Family}\r\n            </Typography>      \r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {props.Description}\r\n            </Typography>\r\n        </CardContent>\r\n        {isDialogOpen ? <Dialog isDialogOpen {...props} onClose={handleToggle} /> : ''}\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ImgCard;","import React, {\r\n    useEffect\r\n} from 'react';\r\nimport {\r\n    makeStyles\r\n} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ImgCard from './Card';\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: \"80%\"\r\n    },\r\n    control: {\r\n        padding: theme.spacing(2),      \r\n    },\r\n}));\r\n\r\nconst GalleryView = (props) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState();\r\n    useEffect(() => {\r\n        fetch('http://styleguide.effectivedigital.com/interview/api/' + props.match.url)\r\n            .then(response => response.json())\r\n            .then((myJson) => {\r\n                setValue(()=>(myJson))\r\n            })\r\n    }, [props.match.url]);\r\n    return (\r\n        <Grid container className={classes.root}>\r\n        <Grid item xs={12}>\r\n                <Grid container justify=\"center\"> {value && value.map(animalData => <ImgCard {...animalData} />)} \r\n                </Grid>\r\n            </Grid>\r\n            </Grid>\r\n    );\r\n}\r\n\r\nexport default GalleryView;","import React from 'react';\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport NavBar from './Navbar';\nimport GalleryView from './GalleryView';\nimport './App.scss';\n\n\n const App = props => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BrowserRouter>\n        <NavBar/>\n          <Switch>\n            <Route path=\"/animals\" component={GalleryView}  />\n            <Route path=\"/fruitveg\" component={GalleryView}/> />\n          </Switch>\n      </BrowserRouter>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}